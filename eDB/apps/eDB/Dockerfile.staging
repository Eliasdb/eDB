# Stage 1: Build
FROM node:20.11.1-bullseye-slim AS builder

# Set working directory
WORKDIR /app

# Install necessary packages
RUN apt-get update && \
    apt-get install -y curl bash wget gnupg apt-transport-https ca-certificates software-properties-common && \
    rm -rf /var/lib/apt/lists/*

# Install .NET 8 SDK using the dotnet-install script
RUN wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh && \
    chmod +x dotnet-install.sh && \
    ./dotnet-install.sh --channel 8.0 --install-dir /usr/share/dotnet && \
    ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet && \
    rm dotnet-install.sh

# Use bash as the shell for subsequent RUN commands
SHELL ["/bin/bash", "-c"]

# Install pnpm globally using npm
RUN npm install -g pnpm

# Copy package.json and pnpm-lock.yaml first for better caching
COPY package.json pnpm-lock.yaml ./


# Install dependencies (including dev dependencies)
RUN pnpm install --frozen-lockfile

# Copy the rest of the application code
COPY . .

ENV SKIP_DOTNET=true

# Build the production-ready app
RUN pnpm run build:staging

# Stage 2: Serve with a lightweight web server
FROM nginx:alpine

# Copy built files from the previous stage
COPY --from=builder /app/dist/apps/eDB /etc/nginx/html/app

# Copy custom nginx configuration
COPY apps/eDB/nginx.conf /etc/nginx/conf.d/default.conf

# Expose the HTTP port
EXPOSE 80

# Start Nginx server
CMD ["nginx", "-g", "daemon off;"]
