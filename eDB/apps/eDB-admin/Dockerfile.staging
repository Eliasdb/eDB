# Stage 1: Build
FROM node:20-bookworm-slim AS builder

# Set working directory to the NX workspace folder
WORKDIR /app/eDB

# Install necessary packages
RUN apt-get update && \
    apt-get install -y curl bash wget gnupg apt-transport-https ca-certificates software-properties-common && \
    rm -rf /var/lib/apt/lists/*

# Install .NET 8 SDK using the dotnet-install script
RUN wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh && \
    chmod +x dotnet-install.sh && \
    ./dotnet-install.sh --channel 8.0 --install-dir /usr/share/dotnet && \
    ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet && \
    rm dotnet-install.sh

# Use bash as the shell for subsequent RUN commands
SHELL ["/bin/bash", "-c"]

# Install pnpm globally
RUN npm install -g pnpm

# Copy NX workspace files (adjust paths to match your repo)
# Assuming your NX workspace is in the subfolder "eDB"
COPY eDB/package.json eDB/pnpm-lock.yaml eDB/nx.json eDB/workspace.json ./

# Copy the rest of the NX workspace (including apps, libs, etc.)
COPY eDB .

# Build the admin app for staging
RUN pnpm run build:staging:admin

# Stage 2: Serve with a lightweight web server
FROM nginx:alpine

# Copy built files from the previous stage.
# (Adjust the output path if necessary—here it’s assumed the build outputs to dist/apps/eDB-admin)
COPY --from=builder /app/eDB/dist/apps/eDB-admin /etc/nginx/html/admin-app

# Copy custom nginx configuration
COPY eDB/apps/eDB-admin/nginx.admin.conf /etc/nginx/conf.d/default.conf

# Expose port 80 and start Nginx
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
