name: Pre-Merge Checks Staging

on:
    pull_request:
        branches:
            - dev
        paths:
            - 'api/**'
            - 'eDB/**'

jobs:
    filter:
        name: Check if Backend or Frontend Code Changed
        runs-on: [self-hosted]
        outputs:
            backend: ${{ steps.set_backend.outputs.backend }}
            frontend: ${{ steps.set_frontend.outputs.frontend }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 2

            - name: Set Backend Changed
              id: set_backend
              run: |
                  if git diff --name-only HEAD~1 HEAD | grep -q '^api/'; then
                    echo "backend=true" >> $GITHUB_OUTPUT
                  else
                    echo "backend=false" >> $GITHUB_OUTPUT
                  fi
              shell: bash

            - name: Set Frontend Changed
              id: set_frontend
              run: |
                  if git diff --name-only HEAD~1 HEAD | grep -q '^eDB/'; then
                    echo "frontend=true" >> $GITHUB_OUTPUT
                  else
                    echo "frontend=false" >> $GITHUB_OUTPUT
                  fi
              shell: bash

            - name: Debug Filter Outputs
              run: |
                  echo "Backend changed: ${{ steps.set_backend.outputs.backend }}"
                  echo "Frontend changed: ${{ steps.set_frontend.outputs.frontend }}"

    version:
        name: Set Version
        runs-on: [self-hosted]
        needs: filter
        outputs:
            image_tag: ${{ steps.version.outputs.image_tag }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: Set Version with PR Number
              id: version
              run: |
                  PR_NUMBER=${{ github.event.pull_request.number }}
                  VERSION=pr-${PR_NUMBER}-staging
                  echo "image_tag=${VERSION}" >> $GITHUB_ENV
                  echo "image_tag=${VERSION}" >> $GITHUB_OUTPUT

    lint-frontend:
        name: Lint Frontend Code
        runs-on: [self-hosted]
        needs: [filter, version]
        if: ${{ needs.filter.outputs.frontend == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install pnpm
              run: corepack enable && corepack prepare pnpm@latest --activate

            - name: Install Dependencies
              run: pnpm install
              working-directory: ./eDB

            - name: Run Lint for All Projects
              run: pnpm nx run-many --target=lint --all --verbose || true
              working-directory: ./eDB

    lint-backend:
        name: Lint Backend Code
        runs-on: [self-hosted]
        needs: [filter, version]
        if: ${{ needs.filter.outputs.backend == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Set up .NET
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0' # Adjust to your .NET version

            - name: Install dotnet format
              run: dotnet tool install --global dotnet-format

            - name: Lint Backend Code
              env:
                  DOTNET_ROOT: ${{ env.DOTNET_ROOT }} # Ensures dotnet tool is in PATH
              run: dotnet format ./PlatformAPI --verify-no-changes --severity info --verbosity detailed || true

    test-frontend:
        name: Run Frontend Unit and Integration Tests
        runs-on: [self-hosted]
        needs: [filter, version]
        if: ${{ needs.filter.outputs.frontend == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install pnpm
              run: corepack enable && corepack prepare pnpm@latest --activate

            - name: Install Dependencies
              run: pnpm install
              working-directory: ./eDB

            - name: Run Tests
              run: pnpm nx run-many --target=test --all --exclude=appointment-app --verbose || true
              working-directory: ./eDB
    test-backend:
        name: Run Backend Unit and Integration Tests
        runs-on: [self-hosted]
        needs: [filter, version]
        if: ${{ needs.filter.outputs.backend == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Set up .NET
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0' # Adjust to your project's .NET version
              env:
                  DOTNET_INSTALL_DIR: ${{ runner.temp }}/dotnet

            - name: Install Dependencies
              run: dotnet restore ./PlatformAPI

            - name: Build Backend Tests
              run: dotnet build ./PlatformAPITests/PlatformAPITests.csproj --configuration Release

            - name: Run Backend Tests
              run: dotnet test ./PlatformAPITests/PlatformAPITests.csproj --configuration Release --no-build --logger trx

    build-backend:
        name: Build and Push Backend Docker Image
        runs-on: [self-hosted]
        needs: [filter, lint-backend, test-backend, version]
        if: ${{ needs.filter.outputs.backend == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Build and Push Backend Docker Image
              uses: docker/build-push-action@v3
              with:
                  context: ./PlatformAPI
                  file: ./PlatformAPI/Dockerfile.staging
                  push: true
                  tags: eliasdb/edb-api:${{ needs.version.outputs.image_tag }}
                  platforms: linux/arm64

    build-frontend:
        name: Build and Push Frontend Docker Image
        runs-on: [self-hosted]
        needs: [filter, lint-frontend, test-frontend, version]
        if: ${{ needs.filter.outputs.frontend == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Build and Push Frontend Docker Image
              uses: docker/build-push-action@v3
              with:
                  context: ./eDB
                  file: ./eDB/Dockerfile.staging
                  push: true
                  tags: eliasdb/edb-nx:${{ needs.version.outputs.image_tag }}
                  platforms: linux/arm64
