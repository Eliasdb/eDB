name: (STAGING) Pre-Merge Checks

on:
    pull_request:
        branches:
            - dev

jobs:
    # ─────────────────────────────────────────────
    version:
        name: Set Version
        runs-on: self-hosted
        outputs:
            image_tag: ${{ steps.setver.outputs.image_tag }}
        steps:
            - name: Set Version with PR number
              id: setver
              run: |
                  VERSION=pr-${{ github.event.pull_request.number }}-staging
                  echo "image_tag=${VERSION}" | tee -a $GITHUB_ENV >> $GITHUB_OUTPUT

    # ─────────────────────────────────────────────
    detect-admin:
        name: Detect if Admin App is affected
        runs-on: self-hosted
        needs: version
        outputs:
            admin_changed: ${{ steps.detect.outputs.admin_changed }}
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - run: npm install -g pnpm
            - run: pnpm install --frozen-lockfile
              working-directory: ./eDB

            - id: detect
              working-directory: ./eDB
              run: |
                  AFFECTED=$(pnpm nx show projects --affected --plain --base=origin/dev --head=HEAD)
                  echo "Affected: $AFFECTED"
                  echo "admin_changed=$(echo "$AFFECTED" | grep -q '^eDB-admin$' && echo true || echo false)" >> $GITHUB_OUTPUT

    # ─────────────────────────────────────────────
    lint:
        name: Lint Affected Projects
        runs-on: self-hosted
        needs:
            - version
            - detect-admin
        steps:
            - uses: actions/checkout@v3

            - uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - run: npm install -g pnpm
            - run: pnpm install
              working-directory: ./eDB

            - name: Lint (skip admin)
              working-directory: ./eDB
              run: |
                  pnpm nx affected --target=lint \
                    --base=origin/dev --head=HEAD \
                    --parallel --exclude=eDB-admin || true

    # ─────────────────────────────────────────────
    test:
        name: Test Affected Projects
        runs-on: self-hosted
        needs:
            - version
            - lint
        steps:
            - uses: actions/checkout@v3

            - uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - run: npm install -g pnpm
            - run: pnpm install
              working-directory: ./eDB

            - name: Test (skip admin)
              working-directory: ./eDB
              run: |
                  pnpm nx affected --target=test \
                    --base=origin/dev --head=HEAD \
                    --parallel --exclude=eDB-admin || true

    # ─────────────────────────────────────────────
    build:
        name: Build & Push Docker Images
        runs-on: self-hosted
        needs:
            - version
            - test
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - run: npm install -g pnpm
            - run: pnpm install
              working-directory: ./eDB

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Build & Push Docker images (skip admin)
              working-directory: ./eDB
              run: |
                  # get all non-admin apps affected
                  AFFECTED=$(pnpm nx show projects --affected --type=app \
                    --base=origin/dev --head=HEAD --plain --exclude=eDB-admin)

                  echo "Affected apps (non-admin): $AFFECTED"

                  # Profile page 
                  # if echo "$AFFECTED_APPS" | grep -iq "eDB-user-account"; then
                  #   echo "Building React app eDB-user-account with Vite"
                  #   pnpm vite build --mode staging --config apps/eDB-user-account/vite.config.ts
                  #   pnpm vite build --mode staging --config apps/eDB-user-account/vite.styles.config.ts
                  # fi

                  for app in $AFFECTED; do
                    lower_app=$(echo "$app" | tr '[:upper:]' '[:lower:]')

                    # skip the embedded webshop
                    if [ "$lower_app" = "edb-webshop" ]; then
                      echo "⚠️ Skipping $app"
                      continue
                    fi

                    # build only if it’s not a special case
                    if [ "$lower_app" != "webshop-api" ] && [ "$app" != "eDB-user-account" ]; then
                      echo "🏗️ Building $app"
                      pnpm nx run "$app":build --configuration=staging
                    else
                      echo "⚠️ Skipping NX build for $app"
                    fi

                    # skip Docker for the user-account app
                    if [ "$app" = "eDB-user-account" ]; then
                      echo "⚠️ Skipping Docker for $app"
                      continue
                    fi

                    echo "🐳 Docker build & push for $app"
                    docker build --platform linux/arm64 \
                      -f "docker/$app/Dockerfile.staging" \
                      -t "eliasdb/$lower_app:${{ needs.version.outputs.image_tag }}" .
                    docker push "eliasdb/$lower_app:${{ needs.version.outputs.image_tag }}"
                  done

    # ─────────────────────────────────────────────
    call-admin:
        name: Call Admin CI
        needs:
            - detect-admin
            - version

        if: needs.detect-admin.outputs.admin_changed == 'true'
        uses: ./.github/workflows/admin-ci.staging.yml
        with:
            image_tag: ${{ needs.version.outputs.image_tag }}
        secrets:
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
