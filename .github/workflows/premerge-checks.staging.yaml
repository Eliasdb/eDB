name: Pre-Merge Checks Staging

on:
    pull_request:
        branches:
            - dev
    # workflow_dispatch: # Enable manual trigger
    #     inputs:
    #         job_to_run:
    #             description: 'Select the job to run'
    #             required: false
    #             default: 'all'
    #             type: choice
    #             options:
    #                 - all
    #                 - lint
    #                 - test
    #                 - build

jobs:
    version:
        name: Set Version
        runs-on: self-hosted
        outputs:
            image_tag: ${{ steps.version.outputs.image_tag }}
        steps:
            - name: Set Version with PR Number
              id: version
              run: |
                  PR_NUMBER=${{ github.event.pull_request.number }}
                  VERSION=pr-${PR_NUMBER}-staging
                  echo "image_tag=${VERSION}" >> $GITHUB_ENV
                  echo "image_tag=${VERSION}" >> $GITHUB_OUTPUT

    lint:
        name: Lint Affected Projects
        runs-on: self-hosted
        needs: version
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install .NET SDK
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - name: NX Reset Cache
              run: pnpm nx reset
              working-directory: ./eDB

            - name: Install pnpm
              run: npm install -g pnpm --force

            - name: Install Dependencies
              run: pnpm install
              working-directory: ./eDB

            - name: Lint Affected Projects
              run: pnpm nx affected --target=lint --base=origin/dev --head=HEAD --parallel || true
              working-directory: ./eDB

    test:
        name: Test Affected Projects
        runs-on: self-hosted
        needs: [version, lint]
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install .NET SDK
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - name: Install pnpm
              run: npm install -g pnpm --force

            - name: Install Dependencies
              run: pnpm install
              working-directory: ./eDB

            - name: Test Affected Projects
              run: pnpm nx affected --target=test --base=origin/dev --head=HEAD --parallel || true
              working-directory: ./eDB

    build:
        name: Build Docker Images for Affected Projects
        runs-on: self-hosted
        needs: [version, lint, test]
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install .NET SDK
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - name: Install pnpm
              run: npm install -g pnpm --force

            - name: Install Dependencies
              run: pnpm install
              working-directory: ./eDB

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Build and Push Docker Images for Affected Projects
              working-directory: ./eDB
              run: |
                  # Get affected apps
                  AFFECTED_APPS=$(pnpm nx show projects --affected --type=app --base=origin/dev --head=HEAD --plain)
                  echo "Affected Apps: $AFFECTED_APPS"

                  # Loop through each affected app
                  for app in $AFFECTED_APPS; do
                    echo "Processing app: $app"

                    # If the app is "webshop-api" (case insensitive), skip the nx build step
                    if [ "$(echo "$app" | tr '[:upper:]' '[:lower:]')" = "webshop-api" ]; then
                      echo "Skipping nx build for webshop-api; building Docker image directly."
                    else
                      # Build with special configuration for eDB-admin
                      if [ "$app" = "eDB-admin" ]; then
                        pnpm nx run $app:build --configuration=staging --base-href=/admin/ --deploy-url=/admin/
                      else
                        pnpm nx run $app:build --configuration=staging
                      fi
                    fi

                    # Build Docker image for all apps, including webshop-api
                    lower_app=$(echo "$app" | tr '[:upper:]' '[:lower:]')
                    echo "Building Docker image for: $lower_app"
                    docker build --platform linux/arm64 -f docker/$app/Dockerfile.staging -t eliasdb/$lower_app:${{ needs.version.outputs.image_tag }} .
                    docker push eliasdb/$lower_app:${{ needs.version.outputs.image_tag }}
                  done
