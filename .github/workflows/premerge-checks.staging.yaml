name: Pre-Merge Checks Staging

on:
    pull_request:
        branches:
            - dev

jobs:
    setup:
        name: Setup Environment
        runs-on: [self-hosted]
        outputs:
            image_tag: ${{ steps.version.outputs.image_tag }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install .NET SDK
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - name: Set Version with PR Number
              id: version
              run: |
                  PR_NUMBER=${{ github.event.pull_request.number }}
                  VERSION=pr-${PR_NUMBER}-staging
                  echo "image_tag=${VERSION}" >> $GITHUB_ENV
                  echo "image_tag=${VERSION}" >> $GITHUB_OUTPUT

    lint:
        name: Lint Affected Projects
        runs-on: [self-hosted]
        needs: setup
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install .NET SDK
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - name: Install pnpm
              run: npm install -g pnpm --force

            - name: Install Dependencies
              run: pnpm install
              working-directory: ./eDB

            - name: Lint Affected Projects
              run: pnpm nx affected --target=lint --base=origin/dev --head=HEAD --parallel || true
              working-directory: ./eDB

    test:
        name: Test Affected Projects
        runs-on: [self-hosted]
        needs: lint
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install .NET SDK
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - name: Install pnpm
              run: npm install -g pnpm --force

            - name: Install Dependencies
              run: pnpm install
              working-directory: ./eDB

            - name: Test Affected Projects
              run: pnpm nx affected --target=test --base=origin/dev --head=HEAD --parallel --verbose || true
              working-directory: ./eDB

    build:
        name: Build Docker Images for Affected Projects
        runs-on: [self-hosted]
        needs: [test, setup]
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install .NET SDK
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - name: Install pnpm
              run: npm install -g pnpm --force

            - name: Install Dependencies
              run: pnpm install
              working-directory: ./eDB

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Build and Push Docker Images for Affected Projects
              run: |
                  AFFECTED_APPS=$(pnpm nx show projects --affected --type=app --base=origin/dev --head=HEAD --plain)

                  # Debugging output
                  echo "Affected Apps: $AFFECTED_APPS"

                  if [ -z "$AFFECTED_APPS" ]; then
                    echo "‚ùå No affected apps detected. Exiting..."
                    exit 1
                  fi

                  for app in $AFFECTED_APPS; do
                    echo "üöÄ Building Docker image for $app"
                    
                    # Check if the Dockerfile exists
                    if [ -f "$app/Dockerfile.staging" ]; then
                      # Adding verbose output for Docker build
                      docker build --progress=plain -f $app/Dockerfile.staging -t eliasdb/$app:pr-87-staging . || {
                        echo "‚ùå Docker build failed for $app"
                        exit 1
                      }
                    else
                      echo "‚ùå Missing Dockerfile: $app/Dockerfile.staging"
                      exit 1
                    fi
                  done
