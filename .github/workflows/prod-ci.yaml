name: Production Deployment Workflow

on:
    push:
        branches:
            - main

jobs:
    version:
        name: Set Version
        runs-on: [self-hosted]
        outputs:
            image_tag: ${{ steps.version.outputs.image_tag }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: Set Version
              id: version
              run: |
                  COMMIT_COUNT=$(git rev-list --count HEAD)
                  VERSION=v1.0.${COMMIT_COUNT}-prod
                  echo "image_tag=${VERSION}" >> $GITHUB_ENV
                  echo "::set-output name=image_tag::${VERSION}"

    filter:
        name: Check if Backend or Frontend Code Changed
        runs-on: [self-hosted]
        outputs:
            backend: ${{ steps.set_backend.outputs.backend }}
            frontend: ${{ steps.set_frontend.outputs.frontend }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 2

            - name: Set Backend Changed
              id: set_backend
              run: |
                  if git diff --name-only HEAD~1 HEAD | grep -q '^api/'; then
                    echo "backend=true" >> $GITHUB_OUTPUT
                  else
                    echo "backend=false" >> $GITHUB_OUTPUT
                  fi
              shell: bash

            - name: Set Frontend Changed
              id: set_frontend
              run: |
                  if git diff --name-only HEAD~1 HEAD | grep -q '^eDB/'; then
                    echo "frontend=true" >> $GITHUB_OUTPUT
                  else
                    echo "frontend=false" >> $GITHUB_OUTPUT
                  fi
              shell: bash

            - name: Debug Filter Outputs
              run: |
                  echo "Backend changed: ${{ steps.set_backend.outputs.backend }}"
                  echo "Frontend changed: ${{ steps.set_frontend.outputs.frontend }}"

    k8s-setup:
        name: Configure Kubernetes Cluster
        runs-on: [self-hosted]
        steps:
            - name: Set up kubectl
              uses: azure/setup-kubectl@v3
              with:
                  version: 'latest'
            - name: Configure Kubernetes
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config
                  chmod 600 ~/.kube/config
                  kubectl cluster-info

    lint-yaml:
        name: Lint YAML Files
        runs-on: [self-hosted]
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
            - name: Install yamllint
              run: |
                  sudo apt-get update
                  sudo apt-get install -y yamllint
            - name: Run yamllint on Kubernetes YAML Files
              run: |
                  yamllint k8s/prod/api/
                  yamllint k8s/prod/eDB/

    deploy-backend:
        name: Build and Deploy Backend
        runs-on: [self-hosted]
        needs: [version, k8s-setup, lint-yaml, filter]
        if: ${{ needs.filter.outputs.backend == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}
            - name: Configure Kubernetes
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config
                  chmod 600 ~/.kube/config
                  kubectl cluster-info
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Build and Push Backend Docker Image
              uses: docker/build-push-action@v3
              with:
                  context: ./api
                  file: ./api/Dockerfile.prod
                  push: true
                  tags: ${{ env.DOCKER_IMAGE_API }}:${{ needs.version.outputs.image_tag }}
                  platforms: linux/arm64
            # 11. Replace Placeholder with Image Tag for API Deployment
            - name: Update API Deployment YAML with Image Tag
              run: |
                  set -e
                  sed "s/\${IMAGE_TAG}/${{ needs.version.outputs.image_tag }}/g" k8s/prod/api/api-deployment-template.prod.yaml > k8s/prod/api/api-deployment.prod.yaml

            # 12a. Debug: Output Updated API Deployment YAML
            - name: Debug API Deployment YAML
              run: |
                  echo "Updated API Deployment YAML:"
                  cat k8s/prod/api/api-deployment.prod.yaml

            # 13. Validate API Deployment YAML
            - name: Validate API Deployment YAML
              run: |
                  kubectl apply --dry-run=client -f k8s/prod/api/api-deployment.prod.yaml

            # 17. Deploy API to Kubernetes with Rollback
            - name: Deploy API to Kubernetes
              run: |
                  kubectl apply -f k8s/prod/api/api-deployment.prod.yaml
                  kubectl rollout status deployment/api-prod || kubectl rollout undo deployment/api-prod

            # 19. Commit Updated API Deployment YAML
            - name: Commit API Deployment YAML
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git add k8s/prod/api/api-deployment.prod.yaml
                  git commit -m "Update API deployment to ${{ env.IMAGE_TAG }}" || echo "No changes to commit"

        env:
            DOCKER_IMAGE_API: eliasdb/edb-api

    deploy-frontend:
        name: Build and Deploy Frontend
        runs-on: [self-hosted]
        needs: [version, k8s-setup, lint-yaml, filter]
        if: ${{ needs.filter.outputs.frontend == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}
            - name: Configure Kubernetes
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config
                  chmod 600 ~/.kube/config
                  kubectl cluster-info
            - name: Build and Push Frontend Docker Image
              uses: docker/build-push-action@v3
              with:
                  context: ./eDB
                  file: ./eDB/Dockerfile.prod
                  push: true
                  tags: ${{ env.DOCKER_IMAGE_FRONTEND }}:${{ needs.version.outputs.image_tag }}
                  platforms: linux/arm64

            # 12. Replace Placeholder with Image Tag for Frontend Deployment
            - name: Update Frontend Deployment YAML with Image Tag
              run: |
                  set -e
                  sed "s/\${IMAGE_TAG}/${{ env.IMAGE_TAG }}/g" k8s/prod/eDB/frontend-deployment-template.prod.yaml > k8s/prod/eDB/frontend-deployment.prod.yaml

            # 12b. Debug: Output Updated Frontend Deployment YAML
            - name: Debug Frontend Deployment YAML
              run: |
                  echo "Updated Frontend Deployment YAML:"
                  cat k8s/prod/eDB/frontend-deployment.prod.yaml

            # 16. Validate Frontend Deployment YAML
            - name: Validate Frontend Deployment YAML
              run: |
                  kubectl apply --dry-run=client -f k8s/prod/eDB/frontend-deployment.prod.yaml

            # 18. Deploy Frontend to Kubernetes with Rollback
            - name: Deploy Frontend to Kubernetes
              run: |
                  kubectl apply -f k8s/prod/eDB/frontend-deployment.prod.yaml
                  kubectl rollout status deployment/edb-nx-prod || kubectl rollout undo deployment/edb-nx-prod

            # 20. Commit Frontend Deployment YAML
            - name: Commit Frontend Deployment YAML
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git add k8s/prod/eDB/frontend-deployment.prod.yaml
                  git commit -m "Update Frontend deployment to ${{ env.IMAGE_TAG }}" || echo "No changes to commit"

        env:
            DOCKER_IMAGE_FRONTEND: eliasdb/edb-nx

    push-changes:
        name: Push Changes to GitHub
        runs-on: [self-hosted]
        needs: [deploy-backend, deploy-frontend]
        steps:
            - name: Push Changes
              uses: ad-m/github-push-action@v0.6.0
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  branch: main
