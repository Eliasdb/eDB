name: Production Deployment

on:
    push:
        branches:
            - main

jobs:
    version:
        name: Set Version
        runs-on: [self-hosted]
        outputs:
            image_tag: ${{ steps.version.outputs.image_tag }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Set Version from Latest Tag
              id: version
              run: |
                  git fetch --tags
                  LATEST_TAG=$(git tag --sort=-creatordate | head -n1)
                  echo "image_tag=${LATEST_TAG}" >> $GITHUB_ENV
                  echo "image_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT

    lint-yaml:
        name: Lint YAML Files
        runs-on: [self-hosted]
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
            - name: Install yamllint
              run: |
                  sudo apt-get update
                  sudo apt-get install -y yamllint
            - name: Run yamllint on Kubernetes YAML Files
              run: |
                  yamllint k8s/prod/api/
                  yamllint k8s/prod/eDB/

    nx-affected:
        name: Determine Nx Affected Projects
        runs-on: self-hosted
        needs: [version, lint-yaml]
        outputs:
            backend: ${{ steps.set_booleans.outputs.backend }}
            platform-app: ${{ steps.set_booleans.outputs.platform-app }}
            admin-app: ${{ steps.set_booleans.outputs.admin-app }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  # Ensure we have enough commit history to compare
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
            - name: Install .NET SDK
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '8.0'

            - name: Install pnpm
              run: npm i -g pnpm

            - name: Install Dependencies
              run: pnpm install
              working-directory: ./eDB

            - name: Print Affected
              working-directory: ./eDB
              run: |
                  # Compare HEAD~1 to HEAD (this may need to be adjusted in some repos)
                  pnpm nx show projects --affected --with-target=build --base=$(git rev-parse HEAD^1) --head=HEAD > ../affected.txt || true
                  echo "Affected Projects:"
                  cat ../affected.txt

            - name: Extract and set booleans for affected projects
              id: set_booleans
              run: |
                  # Read the plain text list (each affected project on a new line)
                  AFFECTED=$(cat affected.txt)
                  echo "Affected Projects: $AFFECTED"

                  if echo "$AFFECTED" | grep -x -q "platform-api"; then
                    echo "backend=true" >> $GITHUB_OUTPUT
                  else
                    echo "backend=false" >> $GITHUB_OUTPUT
                  fi

                  if echo "$AFFECTED" | grep -x -q "eDB"; then
                    echo "platform-app=true" >> $GITHUB_OUTPUT
                  else
                    echo "platform-app=false" >> $GITHUB_OUTPUT
                  fi

                  if echo "$AFFECTED" | grep -x -q "eDB-admin"; then
                    echo "admin-app=true" >> $GITHUB_OUTPUT
                  else
                    echo "admin-app=false" >> $GITHUB_OUTPUT
                  fi

                  # Now, extract the values into variables
                  backend=$(grep '^backend=' $GITHUB_OUTPUT | cut -d'=' -f2)
                  platform=$(grep '^platform-app=' $GITHUB_OUTPUT | cut -d'=' -f2)
                  admin=$(grep '^admin-app=' $GITHUB_OUTPUT | cut -d'=' -f2)

                  # Use printf to format the final output nicely
                  printf "\nFinal values:\n  backend: %s\n  platform-app: %s\n  admin-app: %s\n\n" "$backend" "$platform" "$admin"
              shell: bash

    deploy-backend:
        name: Deploy Platform API to Production
        runs-on: self-hosted
        needs: [nx-affected, version, lint-yaml]
        if: ${{ needs.nx-affected.outputs.backend == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Configure Kubernetes for Production
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config
                  chmod 600 ~/.kube/config
                  kubectl cluster-info

            - name: Replace Placeholder with Image Tag in API Deployment YAML
              run: |
                  set -e
                  sed "s/\${IMAGE_TAG}/${{ needs.version.outputs.image_tag }}/g" \
                    k8s/staging/api/api-deployment-template.prod.yaml \
                    > k8s/prod/api/api-deployment.prod.yaml

            - name: Debug API Deployment YAML
              run: |
                  echo "Updated API Deployment YAML:"
                  cat k8s/prod/api/api-deployment.prod.yaml

            - name: Validate API Deployment YAML
              run: |
                  kubectl apply --dry-run=client -f k8s/prod/api/api-deployment.prod.yaml

            - name: Deploy API to Kubernetes
              run: |
                  kubectl apply -f k8s/prod/api/api-deployment.prod.yaml
                  kubectl rollout status deployment/platform-api-prod || kubectl rollout undo deployment/platform-api-prod

    deploy-platform:
        name: Deploy Platform App to Production
        runs-on: self-hosted
        needs: [nx-affected, version, lint-yaml]
        if: ${{ needs.nx-affected.outputs.platform-app == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Configure Kubernetes for Production
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config
                  chmod 600 ~/.kube/config
                  kubectl cluster-info

            - name: Replace Placeholder with Image Tag in Frontend Deployment YAML
              run: |
                  set -e
                  sed "s/\${IMAGE_TAG}/${{ needs.version.outputs.image_tag }}/g" \
                    k8s/staging/eDB/frontend-deployment-template.staging.yaml \
                    > k8s/staging/eDB/frontend-deployment.staging.yaml

            - name: Debug Frontend Deployment YAML
              run: |
                  echo "Updated Frontend Deployment YAML:"
                  cat k8s/staging/eDB/frontend-deployment.staging.yaml

            - name: Validate Frontend Deployment YAML
              run: |
                  kubectl apply --dry-run=client -f k8s/staging/eDB/frontend-deployment.staging.yaml

            - name: Deploy Frontend to Kubernetes
              run: |
                  kubectl apply -f k8s/prod/eDB/frontend-deployment.prod.yaml
                  kubectl rollout status deployment/web-app-prod || kubectl rollout undo deployment/web-app-prod

    deploy-admin-app:
        name: Deploy Admin App to Production
        runs-on: self-hosted
        needs: [nx-affected, version, lint-yaml]
        if: ${{ needs.nx-affected.outputs.admin-app == 'true' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Configure Kubernetes for Production
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config
                  chmod 600 ~/.kube/config
                  kubectl cluster-info

            - name: Replace Placeholder with Image Tag in Admin Deployment YAML
              run: |
                  set -e
                  sed "s/\${IMAGE_TAG}/${{ needs.version.outputs.image_tag }}/g" \
                    k8s/prod/eDB-admin/edb-admin.deployment-template.prod.yaml \
                    > k8s/prod/eDB-admin/edb-admin.deployment.prod.yaml

            - name: Debug Admin Deployment YAML
              run: |
                  echo "Updated Admin Deployment YAML:"
                  cat k8s/prod/eDB-admin/edb-admin.deployment.prod.yaml

            - name: Validate Admin Deployment YAML
              run: |
                  kubectl apply --dry-run=client -f k8s/prod/eDB-admin/edb-admin.deployment.prod.yaml

            - name: Deploy Admin to Kubernetes
              run: |
                  # Apply both the deployment and service
                  kubectl apply -f k8s/prod/eDB-admin/edb-admin.deployment.prod.yaml
                  kubectl apply -f k8s/prod/eDB-admin/edb-admin.service.prod.yaml
                  # Wait for rollout
                  kubectl rollout status deployment/admin-app-prod || kubectl rollout undo deployment/admin-app-prod
