name: (Staging) Deployment

on:
  push:
    branches:
      - dev
    paths-ignore:
      - 'k8s/apps/**/overlays/**/kustomization.yaml'

jobs:
  # ─────────────────────────────────────────────────────────────────────────────
  # 🔖 Derive PR Tag
  # ─────────────────────────────────────────────────────────────────────────────
  derive-tag:
    name: Derive tag
    runs-on: self-hosted
    outputs:
      image_tag: ${{ steps.out.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 1 }
      - id: out
        run: |
          # Grab the PR number from the merge commit message
          PR_NUMBER=$(git log --oneline -1 | grep -o 'Merge pull request #[0-9]*' | grep -o '[0-9]*')
          if [ -z "$PR_NUMBER" ]; then
            echo "❌ Could not detect PR number in merge commit"
            exit 1
          fi
          echo "image_tag=pr-${PR_NUMBER}-staging" >> $GITHUB_OUTPUT

  # ─────────────────────────────────────────────────────────────────────────────
  # 🔍 Determine Nx Affected Projects
  # ─────────────────────────────────────────────────────────────────────────────
  nx-affected:
    name: Determine Nx Affected Projects
    runs-on: self-hosted
    needs: derive-tag
    outputs:
      platform_api: ${{ steps.set_booleans.outputs.platform_api }}
      webshop_api: ${{ steps.set_booleans.outputs.webshop_api }}
      platform_app: ${{ steps.set_booleans.outputs.platform_app }}
      admin_app: ${{ steps.set_booleans.outputs.admin_app }}
      admin_api: ${{ steps.set_booleans.outputs.admin_api }}
      invoices_api: ${{ steps.set_booleans.outputs.invoices_api }} # Added here

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Print Affected
        run: |
          pnpm nx show projects --affected \
            --with-target=build \
            --base=$(git rev-parse HEAD^1) \
            --head=HEAD > affected.txt || true
          echo "Affected Projects:"
          cat affected.txt

      - name: Extract and set booleans for affected projects
        id: set_booleans
        run: |
          AFFECTED=$(cat affected.txt)
          echo "Affected Projects: $AFFECTED"

          PLATFORM_API=$(echo "$AFFECTED" | grep -xq "platform-api" && echo "true" || echo "false")
          WEBSHOP_API=$(echo "$AFFECTED" | grep -xq "webshop-api" && echo "true" || echo "false")
          PLATFORM_APP=$(echo "$AFFECTED" | grep -xq "edb" && echo "true" || echo "false")
          ADMIN_APP=$(echo "$AFFECTED" | grep -xq "mfe-edb-admin" && echo "true" || echo "false")
          ADMIN_API=$(echo "$AFFECTED" | grep -xq "admin-api" && echo "true" || echo "false")
          INVOICES_API=$(echo "$AFFECTED" | grep -xq "tools-invoices-api" && echo "true" || echo "false")  # added here

          echo "platform_api=${PLATFORM_API}" >> $GITHUB_OUTPUT
          echo "webshop_api=${WEBSHOP_API}" >> $GITHUB_OUTPUT
          echo "platform_app=${PLATFORM_APP}" >> $GITHUB_OUTPUT
          echo "admin_app=${ADMIN_APP}" >> $GITHUB_OUTPUT
          echo "admin_api=${ADMIN_API}" >> $GITHUB_OUTPUT
          echo "invoices_api=${INVOICES_API}" >> $GITHUB_OUTPUT     # added here

          printf "\n📦 What Will Be Deployed:\n\
            🔌 APIs:\n\
              🚀 Platform API:   %s\n\
              🧠 Admin API:      %s\n\
              🛒 Webshop API:    %s\n\
              🧾 Invoice API:    %s\n\
            🧩 Apps:\n\
              📱 Platform App:   %s\n\
              👑 Admin App:      %s\n\n" \
            "$PLATFORM_API" "$ADMIN_API" "$WEBSHOP_API" "$INVOICES_API" "$PLATFORM_APP" "$ADMIN_APP"

        shell: bash

  # ─────────────────────────────────────────────────────────────────────────────
  # 🛒 Deploy Webshop API to Staging
  # ─────────────────────────────────────────────────────────────────────────────
  deploy-webshop-api:
    name: Deploy Webshop API to Staging
    runs-on: self-hosted
    needs: [nx-affected, derive-tag]
    if: ${{ needs.nx-affected.outputs.webshop_api == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_STAGING_CONFIG }}" | base64 --decode > ~/.kube/config
      - run: |
          sed "s/\${IMAGE_TAG}/${{ needs.derive-tag.outputs.image_tag }}/g" \
            k8s/staging/apis/webshop-api/api.deployment.template.staging.yaml \
            > k8s/staging/apis/webshop-api/api.deployment.staging.yaml
      - run: kubectl apply --dry-run=client -f k8s/staging/apis/webshop-api/api.deployment.staging.yaml
      - run: |
          kubectl apply -f k8s/staging/apis/webshop-api/api.deployment.staging.yaml
          kubectl rollout status deployment/webshop-api-staging || kubectl rollout undo deployment/webshop-api-staging

  # ─────────────────────────────────────────────────────────────────────────────
  # 🌐 Deploy Platform App to Staging
  # ─────────────────────────────────────────────────────────────────────────────
  deploy-platform:
    name: Deploy Platform App to Staging
    runs-on: self-hosted
    needs: [nx-affected, derive-tag]
    if: ${{ needs.nx-affected.outputs.platform_app == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_STAGING_CONFIG }}" | base64 --decode > ~/.kube/config
      - run: |
          sed "s/\${IMAGE_TAG}/${{ needs.derive-tag.outputs.image_tag }}/g" \
            k8s/staging/client/edb/frontend-deployment-template.staging.yaml \
            > k8s/staging/client/edb/frontend-deployment.staging.yaml
      - run: kubectl apply --dry-run=client -f k8s/staging/client/edb/frontend-deployment.staging.yaml
      - run: |
          kubectl apply -f k8s/staging/client/edb/frontend-deployment.staging.yaml
          kubectl rollout status deployment/web-app-staging || kubectl rollout undo deployment/web-app-staging

  # ─────────────────────────────────────────────────────────────────────────────
  # 👑 Deploy Admin App to Staging
  # ─────────────────────────────────────────────────────────────────────────────
  deploy-admin-app:
    name: Deploy Admin App to Staging
    runs-on: self-hosted
    needs: [nx-affected, derive-tag]
    if: ${{ needs.nx-affected.outputs.admin_app == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_STAGING_CONFIG }}" | base64 --decode > ~/.kube/config
      - run: |
          sed "s/\${IMAGE_TAG}/${{ needs.derive-tag.outputs.image_tag }}/g" \
            k8s/staging/client/mfe-edb-admin/edb-admin.deployment-template.staging.yaml \
            > k8s/staging/client/mfe-edb-admin/edb-admin.deployment.staging.yaml
      - run: kubectl apply --dry-run=client -f k8s/staging/client/mfe-edb-admin/edb-admin.deployment.staging.yaml
      - run: |
          kubectl apply -f k8s/staging/client/mfe-edb-admin/edb-admin.deployment.staging.yaml
          kubectl apply -f k8s/staging/client/mfe-edb-admin/edb-admin.service.staging.yaml
          kubectl rollout status deployment/admin-app-staging || kubectl rollout undo deployment/admin-app-staging
