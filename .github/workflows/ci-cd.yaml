name: CI/CD Pipeline

on:
    push:
        branches:
            - main

permissions:
    contents: write # Grants write access to repository contents

jobs:
    build-and-deploy:
        name: Build, Push, Validate, and Deploy
        runs-on: ubuntu-latest

        # Only run this job if the commit is not made by the GitHub Actions bot
        if: github.actor != 'github-actions[bot]'

        steps:
            # 0. Checkout the repository with full history
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0 # Fetch all commit history

            # 0a. Set up QEMU for ARM64
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
              with:
                  platforms: arm64

            # 0b. Restore Buildx Cache for API
            - name: Restore Buildx Cache for API
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache-api
                  key: buildx-cache-api-${{ runner.os }}-${{ env.IMAGE_TAG }}
                  restore-keys: |
                      buildx-cache-api-${{ runner.os }}-

            # 0c. Restore Buildx Cache for Frontend
            - name: Restore Buildx Cache for Frontend
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache-frontend
                  key: buildx-cache-frontend-${{ runner.os }}-${{ env.IMAGE_TAG }}
                  restore-keys: |
                      buildx-cache-frontend-${{ runner.os }}-

            # 1. Set Version (Automated Version Incrementation)
            - name: Set Version
              id: version
              run: |
                  set -e
                  # Fetch the total number of commits
                  COMMIT_COUNT=$(git rev-list --count HEAD)
                  echo "Commit count: $COMMIT_COUNT"
                  # Define the version based on commit count
                  VERSION=v1.0.${COMMIT_COUNT}-prod
                  echo "VERSION set to $VERSION"
                  # Export IMAGE_TAG as an environment variable
                  echo "IMAGE_TAG=${VERSION}" >> $GITHUB_ENV

            # 1a. Debug: Output IMAGE_TAG
            - name: Debug IMAGE_TAG
              run: |
                  echo "IMAGE_TAG is set to ${{ env.IMAGE_TAG }}"

            # 2. Set up Buildx with docker-container driver
            - name: Set up Buildx with docker-container driver
              uses: docker/setup-buildx-action@v2
              with:
                  driver: docker-container
                  buildkitd-flags: --allow-insecure-entitlement security.insecure

            # 3. Log in to Docker Hub
            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            # 4. Build and Push API Docker image for ARM
            - name: Build and Push API Docker image (ARM)
              uses: docker/build-push-action@v3
              with:
                  context: ./api
                  file: ./api/Dockerfile.prod
                  push: true
                  tags: |
                      ${{ env.DOCKER_IMAGE_API }}:${{ env.IMAGE_TAG }}
                  platforms: linux/arm64 # Specify ARM architecture
                  cache-from: type=local,src=/tmp/.buildx-cache-api
                  cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max

            # 5. Save Buildx Cache for API
            - name: Save Buildx Cache for API
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache-api-new
                  key: buildx-cache-api-${{ runner.os }}-${{ env.IMAGE_TAG }}
                  restore-keys: |
                      buildx-cache-api-${{ runner.os }}-

            # 6. Build and Push Frontend Docker image for ARM
            - name: Build and Push Frontend Docker image (ARM)
              uses: docker/build-push-action@v3
              with:
                  context: ./eDB
                  file: ./eDB/Dockerfile.prod
                  push: true
                  tags: |
                      ${{ env.DOCKER_IMAGE_FRONTEND }}:${{ env.IMAGE_TAG }}
                  platforms: linux/arm64 # Specify ARM architecture
                  cache-from: type=local,src=/tmp/.buildx-cache-frontend
                  cache-to: type=local,dest=/tmp/.buildx-cache-frontend-new,mode=max

            # 7. Save Buildx Cache for Frontend
            - name: Save Buildx Cache for Frontend
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache-frontend-new
                  key: buildx-cache-frontend-${{ runner.os }}-${{ env.IMAGE_TAG }}
                  restore-keys: |
                      buildx-cache-frontend-${{ runner.os }}-

            # 8. Set up kubectl
            - name: Set up kubectl
              uses: azure/setup-kubectl@v3
              with:
                  version: 'latest'

            # 9. Configure Kubernetes
            - name: Configure Kubernetes
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config
                  chmod 600 ~/.kube/config
                  kubectl cluster-info

            # 10. Lint YAML Files
            - name: Lint YAML Files
              run: |
                  sudo apt-get update
                  sudo apt-get install -y yamllint
                  yamllint k8s/prod/api/api-deployment.prod.yaml
                  yamllint k8s/prod/eDB/frontend-deployment.prod.yaml

            # 11. Replace Placeholder with Image Tag for API Deployment
            - name: Update API Deployment YAML with Image Tag
              run: |
                  set -e
                  sed "s/\${IMAGE_TAG}/${{ env.IMAGE_TAG }}/g" k8s/prod/api/api-deployment-template.prod.yaml > k8s/prod/api/api-deployment.prod.yaml

            # 12. Replace Placeholder with Image Tag for Frontend Deployment
            - name: Update Frontend Deployment YAML with Image Tag
              run: |
                  set -e
                  sed "s/\${IMAGE_TAG}/${{ env.IMAGE_TAG }}/g" k8s/prod/eDB/frontend-deployment-template.prod.yaml > k8s/prod/eDB/frontend-deployment.prod.yaml

            # 15. Validate API Deployment YAML
            - name: Validate API Deployment YAML
              run: |
                  kubectl apply --dry-run=client -f k8s/prod/api/api-deployment.prod.yaml

            # 16. Validate Frontend Deployment YAML
            - name: Validate Frontend Deployment YAML
              run: |
                  kubectl apply --dry-run=client -f k8s/prod/eDB/frontend-deployment.prod.yaml

            # 17. Deploy API to Kubernetes with Rollback
            - name: Deploy API to Kubernetes
              run: |
                  kubectl apply -f k8s/prod/api/api-deployment.prod.yaml
                  kubectl rollout status deployment/api-prod || kubectl rollout undo deployment/api-prod

            # 18. Deploy Frontend to Kubernetes with Rollback
            - name: Deploy Frontend to Kubernetes
              run: |
                  kubectl apply -f k8s/prod/eDB/frontend-deployment.prod.yaml
                  kubectl rollout status deployment/edb-nx-prod || kubectl rollout undo deployment/edb-nx-prod

            # 19. Commit Updated API Deployment YAML
            - name: Commit API Deployment YAML
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git add k8s/prod/api/api-deployment.prod.yaml
                  git commit -m "Update API deployment to ${{ env.IMAGE_TAG }}" || echo "No changes to commit"

            # 20. Commit Frontend Deployment YAML
            - name: Commit Frontend Deployment YAML
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git add k8s/prod/eDB/frontend-deployment.prod.yaml
                  git commit -m "Update Frontend deployment to ${{ env.IMAGE_TAG }}" || echo "No changes to commit"

            # 21. Push Changes to GitHub
            - name: Push Changes
              uses: ad-m/github-push-action@v0.6.0
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  branch: main

        # Define environment variables
        env:
            DOCKER_IMAGE_API: eliasdb/edb-api
            DOCKER_IMAGE_FRONTEND: eliasdb/edb-nx
