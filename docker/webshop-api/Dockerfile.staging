# =========================================================
# Base runtime with needed PHP extensions (Alpine)
# =========================================================
FROM php:8.3-fpm-alpine AS runtime

# Build deps for PHP extensions, then runtime tools
RUN apk add --no-cache --virtual .build-deps $PHPIZE_DEPS postgresql-dev linux-headers \
    && apk add --no-cache nginx bash postgresql-libs \
    && docker-php-ext-install sockets pdo pdo_pgsql \
    && apk del .build-deps

# Bring Composer into this image (so it sees ext-sockets)
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /var/www

# ---------------------------------------------------------
# Composer layer with cache:
#  1) copy only composer files
#  2) install deps WITHOUT scripts (artisan not copied yet)
# ---------------------------------------------------------
COPY apps/server/webshop-api/composer.json apps/server/webshop-api/composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --no-progress --no-scripts

# ---------------------------------------------------------
# Now copy the rest of the Laravel app (artisan included)
# ---------------------------------------------------------
COPY apps/server/webshop-api /var/www

# Run Laravel package discovery now that artisan exists
# (don't fail the build if app code references env/services)
RUN php artisan package:discover || true

# Make sure required dirs exist & are writable
RUN mkdir -p storage/framework/{cache,sessions,views} \
    && mkdir -p bootstrap/cache \
    && chown -R www-data:www-data /var/www \
    && chmod -R ug+rw storage bootstrap/cache

# ---------------------------------------------------------
# Nginx + entrypoint
# ---------------------------------------------------------
COPY docker/webshop-api/wait-for-postgres.sh /var/www/wait-for-postgres.sh
RUN chmod +x /var/www/wait-for-postgres.sh

COPY docker/webshop-api/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/webshop-api/nginx/default.conf /etc/nginx/conf.d/default.conf

COPY docker/webshop-api/entrypoint.sh /var/www/entrypoint.sh
RUN chmod +x /var/www/entrypoint.sh

EXPOSE 8000
ENTRYPOINT ["/var/www/entrypoint.sh"]
